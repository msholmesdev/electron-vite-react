// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CloseLobby } from "./close_lobby_reducer.ts";
export { CloseLobby };
import { JoinLobby } from "./join_lobby_reducer.ts";
export { JoinLobby };
import { RemoveSelfFromLobby } from "./remove_self_from_lobby_reducer.ts";
export { RemoveSelfFromLobby };
import { StartLobby } from "./start_lobby_reducer.ts";
export { StartLobby };

// Import and reexport all table handle types
import { BossTableHandle } from "./boss_table.ts";
export { BossTableHandle };
import { CardTableHandle } from "./card_table.ts";
export { CardTableHandle };
import { GameTableHandle } from "./game_table.ts";
export { GameTableHandle };
import { GameSecretsTableHandle } from "./game_secrets_table.ts";
export { GameSecretsTableHandle };
import { LobbyTableHandle } from "./lobby_table.ts";
export { LobbyTableHandle };
import { LobbySecretsTableHandle } from "./lobby_secrets_table.ts";
export { LobbySecretsTableHandle };

// Import and reexport all types
import { Boss } from "./boss_type.ts";
export { Boss };
import { Card } from "./card_type.ts";
export { Card };
import { Game } from "./game_type.ts";
export { Game };
import { GameSecrets } from "./game_secrets_type.ts";
export { GameSecrets };
import { Guilds } from "./guilds_type.ts";
export { Guilds };
import { Lobby } from "./lobby_type.ts";
export { Lobby };
import { LobbySecrets } from "./lobby_secrets_type.ts";
export { LobbySecrets };
import { Locations } from "./locations_type.ts";
export { Locations };

const REMOTE_MODULE = {
  tables: {
    boss: {
      tableName: "boss",
      rowType: Boss.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    card: {
      tableName: "card",
      rowType: Card.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    game: {
      tableName: "game",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "gameToken",
    },
    game_secrets: {
      tableName: "game_secrets",
      rowType: GameSecrets.getTypeScriptAlgebraicType(),
      primaryKey: "gameToken",
    },
    lobby: {
      tableName: "lobby",
      rowType: Lobby.getTypeScriptAlgebraicType(),
      primaryKey: "lobbyToken",
    },
    lobby_secrets: {
      tableName: "lobby_secrets",
      rowType: LobbySecrets.getTypeScriptAlgebraicType(),
      primaryKey: "lobbyToken",
    },
  },
  reducers: {
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CloseLobby: {
      reducerName: "CloseLobby",
      argsType: CloseLobby.getTypeScriptAlgebraicType(),
    },
    JoinLobby: {
      reducerName: "JoinLobby",
      argsType: JoinLobby.getTypeScriptAlgebraicType(),
    },
    RemoveSelfFromLobby: {
      reducerName: "RemoveSelfFromLobby",
      argsType: RemoveSelfFromLobby.getTypeScriptAlgebraicType(),
    },
    StartLobby: {
      reducerName: "StartLobby",
      argsType: StartLobby.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CloseLobby", args: CloseLobby }
| { name: "JoinLobby", args: JoinLobby }
| { name: "RemoveSelfFromLobby", args: RemoveSelfFromLobby }
| { name: "StartLobby", args: StartLobby }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  closeLobby(gameToken: bigint) {
    const __args = { gameToken };
    let __writer = new BinaryWriter(1024);
    CloseLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CloseLobby", __argsBuffer, this.setCallReducerFlags.closeLobbyFlags);
  }

  onCloseLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.onReducer("CloseLobby", callback);
  }

  removeOnCloseLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.offReducer("CloseLobby", callback);
  }

  joinLobby(gameToken: bigint) {
    const __args = { gameToken };
    let __writer = new BinaryWriter(1024);
    JoinLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("JoinLobby", __argsBuffer, this.setCallReducerFlags.joinLobbyFlags);
  }

  onJoinLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.onReducer("JoinLobby", callback);
  }

  removeOnJoinLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.offReducer("JoinLobby", callback);
  }

  removeSelfFromLobby(gameToken: bigint) {
    const __args = { gameToken };
    let __writer = new BinaryWriter(1024);
    RemoveSelfFromLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveSelfFromLobby", __argsBuffer, this.setCallReducerFlags.removeSelfFromLobbyFlags);
  }

  onRemoveSelfFromLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.onReducer("RemoveSelfFromLobby", callback);
  }

  removeOnRemoveSelfFromLobby(callback: (ctx: ReducerEventContext, gameToken: bigint) => void) {
    this.connection.offReducer("RemoveSelfFromLobby", callback);
  }

  startLobby(name: string, maxPlayers: number, isPrivate: boolean) {
    const __args = { name, maxPlayers, isPrivate };
    let __writer = new BinaryWriter(1024);
    StartLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("StartLobby", __argsBuffer, this.setCallReducerFlags.startLobbyFlags);
  }

  onStartLobby(callback: (ctx: ReducerEventContext, name: string, maxPlayers: number, isPrivate: boolean) => void) {
    this.connection.onReducer("StartLobby", callback);
  }

  removeOnStartLobby(callback: (ctx: ReducerEventContext, name: string, maxPlayers: number, isPrivate: boolean) => void) {
    this.connection.offReducer("StartLobby", callback);
  }

}

export class SetReducerFlags {
  closeLobbyFlags: CallReducerFlags = 'FullUpdate';
  closeLobby(flags: CallReducerFlags) {
    this.closeLobbyFlags = flags;
  }

  joinLobbyFlags: CallReducerFlags = 'FullUpdate';
  joinLobby(flags: CallReducerFlags) {
    this.joinLobbyFlags = flags;
  }

  removeSelfFromLobbyFlags: CallReducerFlags = 'FullUpdate';
  removeSelfFromLobby(flags: CallReducerFlags) {
    this.removeSelfFromLobbyFlags = flags;
  }

  startLobbyFlags: CallReducerFlags = 'FullUpdate';
  startLobby(flags: CallReducerFlags) {
    this.startLobbyFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get boss(): BossTableHandle {
    return new BossTableHandle(this.connection.clientCache.getOrCreateTable<Boss>(REMOTE_MODULE.tables.boss));
  }

  get card(): CardTableHandle {
    return new CardTableHandle(this.connection.clientCache.getOrCreateTable<Card>(REMOTE_MODULE.tables.card));
  }

  get game(): GameTableHandle {
    return new GameTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.game));
  }

  get gameSecrets(): GameSecretsTableHandle {
    return new GameSecretsTableHandle(this.connection.clientCache.getOrCreateTable<GameSecrets>(REMOTE_MODULE.tables.game_secrets));
  }

  get lobby(): LobbyTableHandle {
    return new LobbyTableHandle(this.connection.clientCache.getOrCreateTable<Lobby>(REMOTE_MODULE.tables.lobby));
  }

  get lobbySecrets(): LobbySecretsTableHandle {
    return new LobbySecretsTableHandle(this.connection.clientCache.getOrCreateTable<LobbySecrets>(REMOTE_MODULE.tables.lobby_secrets));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
