// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace Guilds {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Farmer = { tag: "Farmer" };
  export type Gamer = { tag: "Gamer" };
  export type GoldDigger = { tag: "GoldDigger" };
  export type Intern = { tag: "Intern" };
  export type Karen = { tag: "Karen" };
  export type Lawyer = { tag: "Lawyer" };
  export type Pirate = { tag: "Pirate" };
  export type Politician = { tag: "Politician" };
  export type TaxiDriver = { tag: "TaxiDriver" };
  export type Thief = { tag: "Thief" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Farmer = { tag: "Farmer" };
  export const Gamer = { tag: "Gamer" };
  export const GoldDigger = { tag: "GoldDigger" };
  export const Intern = { tag: "Intern" };
  export const Karen = { tag: "Karen" };
  export const Lawyer = { tag: "Lawyer" };
  export const Pirate = { tag: "Pirate" };
  export const Politician = { tag: "Politician" };
  export const TaxiDriver = { tag: "TaxiDriver" };
  export const Thief = { tag: "Thief" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Farmer", AlgebraicType.createProductType([])),
      new SumTypeVariant("Gamer", AlgebraicType.createProductType([])),
      new SumTypeVariant("GoldDigger", AlgebraicType.createProductType([])),
      new SumTypeVariant("Intern", AlgebraicType.createProductType([])),
      new SumTypeVariant("Karen", AlgebraicType.createProductType([])),
      new SumTypeVariant("Lawyer", AlgebraicType.createProductType([])),
      new SumTypeVariant("Pirate", AlgebraicType.createProductType([])),
      new SumTypeVariant("Politician", AlgebraicType.createProductType([])),
      new SumTypeVariant("TaxiDriver", AlgebraicType.createProductType([])),
      new SumTypeVariant("Thief", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Guilds): void {
      Guilds.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Guilds {
      return Guilds.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `Guilds`.
export type Guilds = Guilds.Farmer | Guilds.Gamer | Guilds.GoldDigger | Guilds.Intern | Guilds.Karen | Guilds.Lawyer | Guilds.Pirate | Guilds.Politician | Guilds.TaxiDriver | Guilds.Thief;

export default Guilds;

